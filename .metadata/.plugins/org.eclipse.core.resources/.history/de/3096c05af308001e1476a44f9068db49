package com.customer.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.customer.client.BookFeignClient;
import com.customer.client.OrderClient;
import com.customer.dto.Book;
import com.customer.entity.Customer;
import com.customer.entity.Login;
import com.customer.exception.CustomerNotFoundException;
import com.customer.service.CustomerService;

@RestController
@RequestMapping("/customer")
public class CustomerController {

	@Autowired
	private CustomerService customerService;

	@Autowired
	private OrderClient orderClient;

	@Autowired
	private BookFeignClient bookFeignClient;

	@PostMapping("/register")
	public ResponseEntity<?> registerCustomer(@RequestBody Customer customer) {
		customerService.addCustomer(customer);
		return new ResponseEntity<>("You are registered successfully.", HttpStatus.CREATED);
	}

	@PostMapping("/login")
	public String getEmployee(@RequestBody Login login) {
		Customer customer = customerService.getCustomer(login.getId());

		if (customer.getPassword().equalsIgnoreCase(login.getPassword())) {
			return "Welcome to bookstore " + customer.getName();
		} else
			throw new CustomerNotFoundException("You are not registered yet");

	}
	
	@GetMapping("/validate")
	public String validateToken(@RequestParam("token") String token) {
		customerService.validatetoken(token);
		return "Token is valid";
	}

	@GetMapping("/getCustomers")
	public List<Customer> getCustomers() {

		List<Customer> list = customerService.getCustomers();
		return list;

	}

	@GetMapping("/getCustomer/{customerId}")
	public Customer getCustomer(@PathVariable int customerId) {

		Customer customer = customerService.getCustomer((customerId));
		return customer;

	}

	@GetMapping("/books")
	public List<Book> getBooks() {

		List<Book> books = bookFeignClient.getBooks();
		return books;
	}

	@GetMapping("/order/{customerId}")
	public String makeOrder(@PathVariable("customerId") int customerId) {

		String msg = orderClient.makeOrder(customerId);
		return msg;
	}
}
